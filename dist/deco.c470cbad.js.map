{"mappings":"AAAA,MAAM,eAAe,SAAS,cAAc,CAAC;AAC7C,MAAM,aAAa,SAAS,cAAc,CAAC;AAC3C,MAAM,eAAe,SAAS,cAAc,CAAC;AAC7C,MAAM,aAAa,SAAS,cAAc,CAAC;AAC3C,MAAM,cAAc,SAAS,cAAc,CAAC;AAC5C,MAAM,eAAe,SAAS,cAAc,CAAC;AAC7C,IAAI,kBAAkB;AACtB,IAAI,SAAS;IAAE,GAAG;IAAG,GAAG;AAAE;AAC1B,IAAI,eAAe;AACnB,IAAI,gBAAgB;AAGpB,YAAY;AACZ,SAAS,sBAAsB,KAAK;IAChC,aAAa,KAAK,CAAC,eAAe,GAAG;AACzC;AAEA,gBAAgB;AAChB,aAAa,gBAAgB,CAAC,SAAS,CAAC;IACpC,IAAI,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,gBAAgB;QAC5C,MAAM,QAAQ,EAAE,MAAM,CAAC,YAAY,CAAC;QACpC,sBAAsB;IAC1B;AACJ;AAEA,SAAS,gBAAgB,CAAC;IACtB,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,eAAe;QAChC,kBAAkB,EAAE,MAAM,CAAC,OAAO,CAAC;QACnC,MAAM,OAAO,gBAAgB,qBAAqB;QAClD,MAAM,UAAU,EAAE,OAAO,IAAK,EAAE,OAAO,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO;QAC/D,MAAM,UAAU,EAAE,OAAO,IAAK,EAAE,OAAO,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO;QAE/D,SAAS;YACL,GAAG,UAAU,KAAK,IAAI;YACtB,GAAG,UAAU,KAAK,GAAG;QACzB;IACJ;AACJ;AAEA,SAAS,eAAe,CAAC;IACrB,IAAI,iBAAiB;QACjB,EAAE,cAAc,IAAI,8BAA8B;QAClD,MAAM,UAAU,EAAE,OAAO,IAAK,EAAE,OAAO,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO;QAC/D,MAAM,UAAU,EAAE,OAAO,IAAK,EAAE,OAAO,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO;QAE/D,MAAM,gBAAgB,aAAa,qBAAqB;QACxD,IAAI,IAAI,UAAU,cAAc,IAAI,GAAG,OAAO,CAAC;QAC/C,IAAI,IAAI,UAAU,cAAc,GAAG,GAAG,OAAO,CAAC;QAE9C,6CAA6C;QAC7C,MAAM,cAAc,gBAAgB,qBAAqB;QACzD,MAAM,eAAe,YAAY,KAAK;QACtC,MAAM,gBAAgB,YAAY,MAAM;QAExC,8CAA8C;QAC9C,IAAI,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,cAAc,KAAK,GAAG;QAClD,IAAI,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,cAAc,MAAM,GAAG;QAEnD,gBAAgB,KAAK,CAAC,IAAI,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;QACrC,gBAAgB,KAAK,CAAC,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;IACxC;AACJ;AAEA,SAAS,eAAe,CAAC;IACrB,IAAI,iBAAiB;QACjB,EAAE,cAAc,IAAI,8BAA8B;QAClD,MAAM,UAAU,EAAE,OAAO,IAAK,EAAE,OAAO,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO;QAC/D,MAAM,UAAU,EAAE,OAAO,IAAK,EAAE,OAAO,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO;QAE/D,MAAM,gBAAgB,aAAa,qBAAqB;QACxD,IAAI,IAAI,UAAU,cAAc,IAAI,GAAG,OAAO,CAAC;QAC/C,IAAI,IAAI,UAAU,cAAc,GAAG,GAAG,OAAO,CAAC;QAE9C,6CAA6C;QAC7C,MAAM,cAAc,gBAAgB,qBAAqB;QACzD,MAAM,eAAe,YAAY,KAAK;QACtC,MAAM,gBAAgB,YAAY,MAAM;QAExC,8CAA8C;QAC9C,IAAI,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,cAAc,KAAK,GAAG;QAClD,IAAI,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,cAAc,MAAM,GAAG;QAEnD,gBAAgB,KAAK,CAAC,IAAI,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;QACrC,gBAAgB,KAAK,CAAC,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;IACxC;AACJ;AAGA,SAAS;IACL,kBAAkB;AACtB;AAEA,UAAU;AACV,SAAS,iBAAiB,CAAC;IACvB,IAAI,EAAE,OAAO,CAAC,MAAM,KAAK,GACrB,gBAAgB,YAAY,EAAE,OAAO,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE;AAE9D;AAEA,UAAU;AACV,SAAS,gBAAgB,CAAC;IACtB,IAAI,EAAE,OAAO,CAAC,MAAM,KAAK,GAAG;QACxB,MAAM,kBAAkB,YAAY,EAAE,OAAO,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE;QAC9D,MAAM,QAAQ,kBAAkB;QAEhC,sBAAsB;QACtB,eAAe,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,eAAe,OAAO,MAAM;QAE7D,qBAAqB;QACrB,IAAI,iBACA,gBAAgB,KAAK,CAAC,SAAS,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAG9D,gBAAgB;IACpB;AACJ;AAEA,qBAAqB;AACrB,SAAS,YAAY,MAAM,EAAE,MAAM;IAC/B,MAAM,KAAK,OAAO,OAAO,GAAG,OAAO,OAAO;IAC1C,MAAM,KAAK,OAAO,OAAO,GAAG,OAAO,OAAO;IAC1C,OAAO,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK;AACpC;AAEA,eAAe;AACf,aAAa,gBAAgB,CAAC,aAAa;AAC3C,SAAS,gBAAgB,CAAC,aAAa;AACvC,SAAS,gBAAgB,CAAC,WAAW;AAErC,eAAe;AACf,aAAa,gBAAgB,CAAC,cAAc,iBAAiB;IAAE,SAAS;AAAM;AAC9E,SAAS,gBAAgB,CAAC,aAAa,gBAAgB;IAAE,SAAS;AAAM;AACxE,SAAS,gBAAgB,CAAC,YAAY;AAEtC,WAAW;AACX,aAAa,gBAAgB,CAAC,cAAc,kBAAkB;IAAE,SAAS;AAAM;AAC/E,aAAa,gBAAgB,CAAC,aAAa,iBAAiB;IAAE,SAAS;AAAM;AAI7E,eAAe;AACf,aAAa,gBAAgB,CAAC,aAAa;AAC3C,SAAS,gBAAgB,CAAC,aAAa;AACvC,SAAS,gBAAgB,CAAC,WAAW;AAErC,eAAe;AACf,aAAa,gBAAgB,CAAC,cAAc,iBAAiB;IAAE,SAAS;AAAM;AAC9E,SAAS,gBAAgB,CAAC,aAAa,gBAAgB;IAAE,SAAS;AAAM;AACxE,SAAS,gBAAgB,CAAC,YAAY;AAEtC,SAAS,SAAS,UAAU,EAAE,KAAK,EAAE,MAAM;IACvC,OAAO,IAAI,QAAQ,CAAC;QAChB,MAAM,SAAS,SAAS,aAAa,CAAC;QACtC,OAAO,KAAK,GAAG;QACf,OAAO,MAAM,GAAG;QAChB,MAAM,MAAM,OAAO,UAAU,CAAC;QAE9B,eAAe;QACf,MAAM,YAAY,IAAI,gBAAgB,iBAAiB,CAAC;QACxD,MAAM,MAAM,IAAI;QAChB,IAAI,MAAM,GAAG;YACT,IAAI,SAAS,CAAC,KAAK,GAAG;YACtB,QAAQ,OAAO,SAAS,CAAC;QAC7B;QACA,IAAI,GAAG,GAAG,+BAA+B,KAAK;IAClD;AACJ;AAEA,eAAe;IACX,MAAM,SAAS,SAAS,aAAa,CAAC;IACtC,OAAO,KAAK,GAAG,aAAa,WAAW;IACvC,OAAO,MAAM,GAAG,aAAa,YAAY;IACzC,MAAM,MAAM,OAAO,UAAU,CAAC;IAE9B,SAAS;IACT,IAAI,SAAS,GAAG,aAAa,KAAK,CAAC,eAAe,IAAI;IACtD,IAAI,QAAQ,CAAC,GAAG,GAAG,OAAO,KAAK,EAAE,OAAO,MAAM;IAE9C,MAAM,OAAO,aAAa,sBAAsB,CAAC;IACjD,KAAK,MAAM,UAAU,KAAM;QACvB,MAAM,aAAa,OAAO,aAAa,CAAC;QACxC,MAAM,OAAO,OAAO,qBAAqB;QACzC,MAAM,gBAAgB,aAAa,qBAAqB;QAExD,YAAY;QACZ,MAAM,IAAI,KAAK,IAAI,GAAG,cAAc,IAAI;QACxC,MAAM,IAAI,KAAK,GAAG,GAAG,cAAc,GAAG;QAEtC,MAAM,aAAa,MAAM,SAAS,YAAY,WAAW,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,MAAM,CAAC,OAAO,CAAC,KAAK;QAC7G,MAAM,MAAM,IAAI;QAChB,MAAM,IAAI,QAAQ,CAAC;YACf,IAAI,MAAM,GAAG;YACb,IAAI,GAAG,GAAG;QACd;QACA,IAAI,SAAS,CAAC,KAAK,GAAG;IAC1B;IAEA,OAAO,OAAO,SAAS,CAAC;AAC5B;AAEA,WAAW,gBAAgB,CAAC,SAAS,CAAC;IAClC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,QAAQ;QACzB,MAAM,aAAa,EAAE,MAAM,CAAC,OAAO,CAAC;QACpC,MAAM,SAAS,WAAW,SAAS,CAAC;QACpC,MAAM,UAAU,SAAS,aAAa,CAAC;QACvC,QAAQ,SAAS,GAAG;QACpB,QAAQ,KAAK,CAAC,QAAQ,GAAG;QACzB,QAAQ,KAAK,CAAC,IAAI,GAAG,QAAS,iBAAiB;QAC/C,QAAQ,KAAK,CAAC,GAAG,GAAG,QAAU,iBAAiB;QAC/C,QAAQ,WAAW,CAAC;QACpB,aAAa,WAAW,CAAC;IAC7B;AACJ;AAGA,aAAa,gBAAgB,CAAC,SAAS;IACnC,MAAM,YAAY,aAAa,gBAAgB,CAAC;IAChD,UAAU,OAAO,CAAC,CAAC;QACf,QAAQ,MAAM;IAClB;AACJ;AAEA,WAAW,gBAAgB,CAAC,SAAS;IACjC,IAAI;QACA,MAAM,aAAa,MAAM;QACzB,MAAM,OAAO,SAAS,aAAa,CAAC;QACpC,KAAK,IAAI,GAAG;QACZ,KAAK,QAAQ,GAAG;QAChB,KAAK,KAAK;IACd,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qBAAqB;QACnC,MAAM;IACV;AACJ;AAEA,YAAY,gBAAgB,CAAC,SAAS;IAClC,IAAI;QACA,MAAM,aAAa,MAAM;QACzB,MAAM,OAAO,MAAM,AAAC,CAAA,MAAM,MAAM,WAAU,EAAG,IAAI;QACjD,MAAM,OAAO,IAAI,KAAK;YAAC;SAAK,EAAE,sBAAsB;YAAC,MAAM;QAAW;QAEtE,IAAI,UAAU,KAAK,EACf,UAAU,KAAK,CAAC;YACZ,OAAO;gBAAC;aAAK;YACb,OAAO;YACP,MAAM;QACV,GAAG,IAAI,CAAC,IAAM,QAAQ,GAAG,CAAC,wBACvB,KAAK,CAAC,CAAC,QAAU,QAAQ,GAAG,CAAC,kBAAkB;aAElD,MAAM;IAEd,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,sBAAsB;QACpC,MAAM;IACV;AACJ;AAEA,YAAY;AACZ,sBAAsB","sources":["js/deco.js"],"sourcesContent":["const svgContainer = document.getElementById('svgContainer');\r\nconst svgPalette = document.getElementById('svgPalette');\r\nconst removeButton = document.getElementById('removeButton')\r\nconst saveButton = document.getElementById('saveButton');\r\nconst shareButton = document.getElementById('shareButton');\r\nconst colorOptions = document.getElementById('colorOptions');\r\nlet draggingElement = null;\r\nlet offset = { x: 0, y: 0 };\r\nlet currentScale = 1;\r\nlet startDistance = 0;\r\n\r\n\r\n// 배경색 변경 함수\r\nfunction changeBackgroundColor(color) {\r\n    svgContainer.style.backgroundColor = color;\r\n}\r\n\r\n// 색상 옵션 이벤트 리스너\r\ncolorOptions.addEventListener('click', (e) => {\r\n    if (e.target.classList.contains('colorOption')) {\r\n        const color = e.target.getAttribute('data-color');\r\n        changeBackgroundColor(color);\r\n    }\r\n});\r\n\r\nfunction handleDragStart(e) {\r\n    if (e.target.closest('.draggable')) {\r\n        draggingElement = e.target.closest('.draggable');\r\n        const rect = draggingElement.getBoundingClientRect();\r\n        const clientX = e.clientX || (e.touches && e.touches[0].clientX);\r\n        const clientY = e.clientY || (e.touches && e.touches[0].clientY);\r\n        \r\n        offset = {\r\n            x: clientX - rect.left,\r\n            y: clientY - rect.top\r\n        };\r\n    }\r\n}\r\n\r\nfunction handleDragMove(e) {\r\n    if (draggingElement) {\r\n        e.preventDefault(); // Prevent scrolling on mobile\r\n        const clientX = e.clientX || (e.touches && e.touches[0].clientX);\r\n        const clientY = e.clientY || (e.touches && e.touches[0].clientY);\r\n        \r\n        const containerRect = svgContainer.getBoundingClientRect();\r\n        let x = clientX - containerRect.left - offset.x;\r\n        let y = clientY - containerRect.top - offset.y;\r\n        \r\n        // Get the dimensions of the dragging element\r\n        const elementRect = draggingElement.getBoundingClientRect();\r\n        const elementWidth = elementRect.width;\r\n        const elementHeight = elementRect.height;\r\n        \r\n        // Constrain the position within the container\r\n        x = Math.max(0, Math.min(x, containerRect.width - elementWidth));\r\n        y = Math.max(0, Math.min(y, containerRect.height - elementHeight));\r\n        \r\n        draggingElement.style.left = `${x}px`;\r\n        draggingElement.style.top = `${y}px`;\r\n    }\r\n}\r\n\r\nfunction handleDragMove(e) {\r\n    if (draggingElement) {\r\n        e.preventDefault(); // Prevent scrolling on mobile\r\n        const clientX = e.clientX || (e.touches && e.touches[0].clientX);\r\n        const clientY = e.clientY || (e.touches && e.touches[0].clientY);\r\n        \r\n        const containerRect = svgContainer.getBoundingClientRect();\r\n        let x = clientX - containerRect.left - offset.x;\r\n        let y = clientY - containerRect.top - offset.y;\r\n        \r\n        // Get the dimensions of the dragging element\r\n        const elementRect = draggingElement.getBoundingClientRect();\r\n        const elementWidth = elementRect.width;\r\n        const elementHeight = elementRect.height;\r\n        \r\n        // Constrain the position within the container\r\n        x = Math.max(0, Math.min(x, containerRect.width - elementWidth));\r\n        y = Math.max(0, Math.min(y, containerRect.height - elementHeight));\r\n        \r\n        draggingElement.style.left = `${x}px`;\r\n        draggingElement.style.top = `${y}px`;\r\n    }\r\n}\r\n\r\n\r\nfunction handleDragEnd() {\r\n    draggingElement = null;\r\n}\r\n\r\n// 핀치 줌 시작\r\nfunction handlePinchStart(e) {\r\n    if (e.touches.length === 2) {\r\n        startDistance = getDistance(e.touches[0], e.touches[1]);\r\n    }\r\n}\r\n\r\n// 핀치 줌 진행\r\nfunction handlePinchMove(e) {\r\n    if (e.touches.length === 2) {\r\n        const currentDistance = getDistance(e.touches[0], e.touches[1]);\r\n        const scale = currentDistance / startDistance;\r\n        \r\n        // 스케일 제한 (예: 0.5 ~ 3)\r\n        currentScale = Math.min(Math.max(currentScale * scale, 0.5), 3);\r\n        \r\n        // 선택된 SVG 요소에 스케일 적용\r\n        if (draggingElement) {\r\n            draggingElement.style.transform = `scale(${currentScale})`;\r\n        }\r\n        \r\n        startDistance = currentDistance;\r\n    }\r\n}\r\n\r\n// 두 터치 포인트 사이의 거리 계산\r\nfunction getDistance(touch1, touch2) {\r\n    const dx = touch1.clientX - touch2.clientX;\r\n    const dy = touch1.clientY - touch2.clientY;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\n// Mouse events\r\nsvgContainer.addEventListener('mousedown', handleDragStart);\r\ndocument.addEventListener('mousemove', handleDragMove);\r\ndocument.addEventListener('mouseup', handleDragEnd);\r\n\r\n// Touch events\r\nsvgContainer.addEventListener('touchstart', handleDragStart, { passive: false });\r\ndocument.addEventListener('touchmove', handleDragMove, { passive: false });\r\ndocument.addEventListener('touchend', handleDragEnd);\r\n\r\n// 핀치 줌 이벤트\r\nsvgContainer.addEventListener('touchstart', handlePinchStart, { passive: false });\r\nsvgContainer.addEventListener('touchmove', handlePinchMove, { passive: false });\r\n\r\n\r\n\r\n// Mouse events\r\nsvgContainer.addEventListener('mousedown', handleDragStart);\r\ndocument.addEventListener('mousemove', handleDragMove);\r\ndocument.addEventListener('mouseup', handleDragEnd);\r\n\r\n// Touch events\r\nsvgContainer.addEventListener('touchstart', handleDragStart, { passive: false });\r\ndocument.addEventListener('touchmove', handleDragMove, { passive: false });\r\ndocument.addEventListener('touchend', handleDragEnd);\r\n\r\nfunction svgToPng(svgElement, width, height) {\r\n    return new Promise((resolve) => {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        // SVG를 이미지로 변환\r\n        const svgString = new XMLSerializer().serializeToString(svgElement);\r\n        const img = new Image();\r\n        img.onload = () => {\r\n            ctx.drawImage(img, 0, 0);\r\n            resolve(canvas.toDataURL('image/png'));\r\n        };\r\n        img.src = 'data:image/svg+xml;base64,' + btoa(svgString);\r\n    });\r\n}\r\n\r\nasync function generateCompositePng() {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = svgContainer.offsetWidth;\r\n    canvas.height = svgContainer.offsetHeight;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    // 배경색 적용\r\n    ctx.fillStyle = svgContainer.style.backgroundColor || '#FFFFFF';\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const svgs = svgContainer.getElementsByClassName('svgImage');\r\n    for (const svgDiv of svgs) {\r\n        const svgElement = svgDiv.querySelector('svg');\r\n        const rect = svgDiv.getBoundingClientRect();\r\n        const containerRect = svgContainer.getBoundingClientRect();\r\n\r\n        // 상대적 위치 계산\r\n        const x = rect.left - containerRect.left;\r\n        const y = rect.top - containerRect.top;\r\n\r\n        const pngDataUrl = await svgToPng(svgElement, svgElement.width.baseVal.value, svgElement.height.baseVal.value);\r\n        const img = new Image();\r\n        await new Promise((resolve) => {\r\n            img.onload = resolve;\r\n            img.src = pngDataUrl;\r\n        });\r\n        ctx.drawImage(img, x, y);\r\n    }\r\n\r\n    return canvas.toDataURL('image/png');\r\n}\r\n\r\nsvgPalette.addEventListener('click', (e) => {\r\n    if (e.target.closest('svg')) {\r\n        const svgElement = e.target.closest('svg');\r\n        const newSvg = svgElement.cloneNode(true);\r\n        const wrapper = document.createElement('div');\r\n        wrapper.className = 'svgImage draggable';\r\n        wrapper.style.position = 'absolute';\r\n        wrapper.style.left = '50px';  // 퍼센트 대신 픽셀 값 사용\r\n        wrapper.style.top = '50px';   // 퍼센트 대신 픽셀 값 사용\r\n        wrapper.appendChild(newSvg);\r\n        svgContainer.appendChild(wrapper);\r\n    }\r\n});\r\n\r\n\r\nremoveButton.addEventListener('click', () => {\r\n    const svgImages = svgContainer.querySelectorAll('.svgImage');\r\n    svgImages.forEach((wrapper) => {\r\n        wrapper.remove();\r\n    });\r\n});\r\n\r\nsaveButton.addEventListener('click', async () => {\r\n    try {\r\n        const pngDataUrl = await generateCompositePng();\r\n        const link = document.createElement('a');\r\n        link.href = pngDataUrl;\r\n        link.download = 'composed_image.png';\r\n        link.click();\r\n    } catch (error) {\r\n        console.error('Error saving PNG:', error);\r\n        alert('PNG 저장 중 오류가 발생했습니다.');\r\n    }\r\n});\r\n\r\nshareButton.addEventListener('click', async () => {\r\n    try {\r\n        const pngDataUrl = await generateCompositePng();\r\n        const blob = await (await fetch(pngDataUrl)).blob();\r\n        const file = new File([blob], 'composed_image.png', {type: 'image/png'});\r\n        \r\n        if (navigator.share) {\r\n            navigator.share({\r\n                files: [file],\r\n                title: 'Composed Image',\r\n                text: 'Check out my composed image!'\r\n            }).then(() => console.log('Shared successfully'))\r\n              .catch((error) => console.log('Error sharing:', error));\r\n        } else {\r\n            alert('Web Share API is not supported in your browser.');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error sharing PNG:', error);\r\n        alert('PNG 공유 중 오류가 발생했습니다.');\r\n    }\r\n});\r\n\r\n// 초기 배경색 설정\r\nchangeBackgroundColor('#FFFFFF');"],"names":[],"version":3,"file":"deco.c470cbad.js.map","sourceRoot":"/__parcel_source_root/"}