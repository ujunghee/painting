{"mappings":"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","sources":["js/deco.js"],"sourcesContent":["// next.html\r\nfunction initializeNext() {\r\n    let selectedSeason = '';\r\n    document.querySelectorAll('.select-box button').forEach(button => {\r\n        button.addEventListener('click', function() {\r\n            document.querySelectorAll('.select-box button').forEach(btn => btn.classList.remove('selected'));\r\n            this.classList.add('selected');\r\n            selectedSeason = this.getAttribute('data-season');\r\n        });\r\n    });\r\n    document.querySelector('.deco-next').addEventListener('click', function() {\r\n        if (selectedSeason) {\r\n            const pages = {\r\n                'spring': 'deco_spring.html',\r\n                'summer': 'deco_summer.html',\r\n                'autumn': 'deco_autumn.html',\r\n                'winter': 'deco_winter.html'\r\n            };\r\n            \r\n            loadPage(pages[selectedSeason], function() {\r\n                console.log('페이지 로드 완료:', selectedSeason);\r\n            });\r\n        } else {\r\n            alert('계절을 선택해주세요.');\r\n        }\r\n    });\r\n}\r\n// deco.html\r\nfunction initializeDeco() {\r\n\r\n    const svgContainer = document.getElementById('svgContainer');\r\n    const svgPalette = document.getElementById('svgPalette');\r\n    const completeButton = document.getElementById('completeButton');\r\n    const saveButton = document.getElementById('saveButton');\r\n    const shareButton = document.getElementById('shareButton');\r\n    const colorOptions = document.getElementById('colorOptions');\r\n    const fistButton = document.getElementById('fistButton');\r\n\r\n    const decoTitle = document.querySelectorAll('.deco-title');\r\n    const weSolevkContainer = document.querySelector('.we-solvek');\r\n    const lastTxt = document.querySelector('.last-txt');\r\n    const btnList = document.querySelector('.btn-list');\r\n\r\n    let draggingElement = null;\r\n    let offset = { x: 0, y: 0 };\r\n    let currentScale = 1;\r\n    let startDistance = 0;\r\n    let isCompleted = false;\r\n\r\n    // 배경색 변경 함수\r\n    function changeBackgroundColor(color) {\r\n        svgContainer.style.backgroundColor = color;\r\n    }\r\n\r\n    // 색상 옵션 이벤트 리스너\r\n    colorOptions.addEventListener('click', (e) => {\r\n        if (e.target.classList.contains('colorOption')) {\r\n            const color = e.target.getAttribute('data-color');\r\n            changeBackgroundColor(color);\r\n        }\r\n    });\r\n\r\n    function handleDragStart(e) {\r\n        if (e.target.closest('.draggable')) {\r\n            draggingElement = e.target.closest('.draggable');\r\n            const rect = draggingElement.getBoundingClientRect();\r\n            const clientX = e.clientX || (e.touches && e.touches[0].clientX);\r\n            const clientY = e.clientY || (e.touches && e.touches[0].clientY);\r\n\r\n            offset = {\r\n                x: clientX - rect.left,\r\n                y: clientY - rect.top\r\n            };\r\n        }\r\n    }\r\n\r\n    function handleDragMove(e) {\r\n        if (draggingElement) {\r\n            e.preventDefault(); // Prevent scrolling on mobile\r\n            const clientX = e.clientX || (e.touches && e.touches[0].clientX);\r\n            const clientY = e.clientY || (e.touches && e.touches[0].clientY);\r\n\r\n            const containerRect = svgContainer.getBoundingClientRect();\r\n            let x = clientX - containerRect.left - offset.x;\r\n            let y = clientY - containerRect.top - offset.y;\r\n\r\n            // Get the dimensions of the dragging element\r\n            const elementRect = draggingElement.getBoundingClientRect();\r\n            const elementWidth = elementRect.width;\r\n            const elementHeight = elementRect.height;\r\n\r\n            // Constrain the position within the container\r\n            x = Math.max(0, Math.min(x, containerRect.width - elementWidth));\r\n            y = Math.max(0, Math.min(y, containerRect.height - elementHeight));\r\n\r\n            draggingElement.style.left = `${x}px`;\r\n            draggingElement.style.top = `${y}px`;\r\n        }\r\n    }\r\n\r\n    function handleDragMove(e) {\r\n        if (draggingElement) {\r\n            e.preventDefault(); // Prevent scrolling on mobile\r\n            const clientX = e.clientX || (e.touches && e.touches[0].clientX);\r\n            const clientY = e.clientY || (e.touches && e.touches[0].clientY);\r\n\r\n            const containerRect = svgContainer.getBoundingClientRect();\r\n            let x = clientX - containerRect.left - offset.x;\r\n            let y = clientY - containerRect.top - offset.y;\r\n\r\n            // Get the dimensions of the dragging element\r\n            const elementRect = draggingElement.getBoundingClientRect();\r\n            const elementWidth = elementRect.width;\r\n            const elementHeight = elementRect.height;\r\n\r\n            // Constrain the position within the container\r\n            x = Math.max(0, Math.min(x, containerRect.width - elementWidth));\r\n            y = Math.max(0, Math.min(y, containerRect.height - elementHeight));\r\n\r\n            draggingElement.style.left = `${x}px`;\r\n            draggingElement.style.top = `${y}px`;\r\n        }\r\n    }\r\n\r\n\r\n    function handleDragEnd() {\r\n        draggingElement = null;\r\n    }\r\n\r\n    // 핀치 줌 시작\r\n    function handlePinchStart(e) {\r\n        if (e.touches.length === 2) {\r\n            startDistance = getDistance(e.touches[0], e.touches[1]);\r\n        }\r\n    }\r\n\r\n    // 핀치 줌 진행\r\n    function handlePinchMove(e) {\r\n        if (e.touches.length === 2) {\r\n            const currentDistance = getDistance(e.touches[0], e.touches[1]);\r\n            const scale = currentDistance / startDistance;\r\n\r\n            // 스케일 제한 (예: 0.5 ~ 3)\r\n            currentScale = Math.min(Math.max(currentScale * scale, 0.5), 3);\r\n\r\n            // 선택된 SVG 요소에 스케일 적용\r\n            if (draggingElement) {\r\n                draggingElement.style.transform = `scale(${currentScale})`;\r\n            }\r\n\r\n            startDistance = currentDistance;\r\n        }\r\n    }\r\n\r\n    // 두 터치 포인트 사이의 거리 계산\r\n    function getDistance(touch1, touch2) {\r\n        const dx = touch1.clientX - touch2.clientX;\r\n        const dy = touch1.clientY - touch2.clientY;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n\r\n    // Mouse events\r\n    svgContainer.addEventListener('mousedown', handleDragStart);\r\n    document.addEventListener('mousemove', handleDragMove);\r\n    document.addEventListener('mouseup', handleDragEnd);\r\n\r\n    // Touch events\r\n    svgContainer.addEventListener('touchstart', handleDragStart, { passive: false });\r\n    document.addEventListener('touchmove', handleDragMove, { passive: false });\r\n    document.addEventListener('touchend', handleDragEnd);\r\n\r\n    // 핀치 줌 이벤트\r\n    svgContainer.addEventListener('touchstart', handlePinchStart, { passive: false });\r\n    svgContainer.addEventListener('touchmove', handlePinchMove, { passive: false });\r\n\r\n\r\n\r\n    // Mouse events\r\n    svgContainer.addEventListener('mousedown', handleDragStart);\r\n    document.addEventListener('mousemove', handleDragMove);\r\n    document.addEventListener('mouseup', handleDragEnd);\r\n\r\n    // Touch events\r\n    svgContainer.addEventListener('touchstart', handleDragStart, { passive: false });\r\n    document.addEventListener('touchmove', handleDragMove, { passive: false });\r\n    document.addEventListener('touchend', handleDragEnd);\r\n\r\n    function svgToPng(svgElement, width, height) {\r\n        return new Promise((resolve) => {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n            const ctx = canvas.getContext('2d');\r\n\r\n            // SVG를 이미지로 변환\r\n            const svgString = new XMLSerializer().serializeToString(svgElement);\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                ctx.drawImage(img, 0, 0);\r\n                resolve(canvas.toDataURL('image/png'));\r\n            };\r\n            img.src = 'data:image/svg+xml;base64,' + btoa(svgString);\r\n        });\r\n    }\r\n\r\n    async function generateCompositePng() {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = svgContainer.offsetWidth;\r\n        canvas.height = svgContainer.offsetHeight;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        // 배경색 적용\r\n        ctx.fillStyle = svgContainer.style.backgroundColor || '#FFFFFF';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        const svgs = svgContainer.getElementsByClassName('svgImage');\r\n        for (const svgDiv of svgs) {\r\n            const svgElement = svgDiv.querySelector('svg');\r\n            const rect = svgDiv.getBoundingClientRect();\r\n            const containerRect = svgContainer.getBoundingClientRect();\r\n\r\n            // 상대적 위치 계산\r\n            const x = rect.left - containerRect.left;\r\n            const y = rect.top - containerRect.top;\r\n\r\n            const pngDataUrl = await svgToPng(svgElement, svgElement.width.baseVal.value, svgElement.height.baseVal.value);\r\n            const img = new Image();\r\n            await new Promise((resolve) => {\r\n                img.onload = resolve;\r\n                img.src = pngDataUrl;\r\n            });\r\n            ctx.drawImage(img, x, y);\r\n        }\r\n\r\n        return canvas.toDataURL('image/png');\r\n    }\r\n\r\n    svgPalette.addEventListener('click', (e) => {\r\n        if (e.target.closest('svg')) {\r\n            const svgElement = e.target.closest('svg');\r\n            const newSvg = svgElement.cloneNode(true);\r\n            const wrapper = document.createElement('div');\r\n            wrapper.className = 'svgImage draggable';\r\n            wrapper.style.position = 'absolute';\r\n            wrapper.style.left = '5.0rem'; \r\n            wrapper.style.top = '5.0rem'; \r\n            wrapper.appendChild(newSvg);\r\n            svgContainer.appendChild(wrapper);\r\n        }\r\n    });\r\n\r\n    const removeButton = document.getElementById('removeButton');\r\n\r\n    removeButton.addEventListener('click', () => {\r\n        if (!isCompleted) {\r\n            const svgImages = svgContainer.querySelectorAll('.svgImage');\r\n            svgImages.forEach((wrapper) => {\r\n                wrapper.remove();\r\n            });\r\n            changeBackgroundColor('#FFFFFF'); // 배경색 초기화\r\n        }\r\n    });\r\n\r\n\r\n    // 완성하기 버튼 이벤트 리스너\r\n    completeButton.addEventListener('click', () => {\r\n        isCompleted = true;\r\n\r\n        // 편집 기능 비활성화\r\n        svgContainer.removeEventListener('mousedown', handleDragStart);\r\n        svgContainer.removeEventListener('touchstart', handleDragStart);\r\n        svgContainer.style.height = 'calc(100% - 25rem)';\r\n        weSolevkContainer.classList.add('open');\r\n        lastTxt.classList.add('open');\r\n\r\n\r\n        // decoTitle.classList.add('off');\r\n        svgPalette.style.display = 'none';\r\n        colorOptions.style.display = 'none';\r\n        btnList.style.display = 'none';\r\n        decoTitle.forEach( () => {\r\n            decoTitle.forEach( (item) => {\r\n                item.classList.add('off');\r\n            });\r\n        });\r\n\r\n        const deco = document.querySelectorAll('.deco');\r\n        deco.forEach((item) => {\r\n            item.style.minHeight = '700px';\r\n        });\r\n\r\n        // 편집 기능 비활성화\r\n        disableEditing();\r\n\r\n         // Save the current SVG container state to localStorage\r\n        const svgData = svgContainer.innerHTML;\r\n        localStorage.setItem('savedSvg', svgData);\r\n\r\n        // Disable editing\r\n        disableEditing();\r\n\r\n        // Optionally, navigate to last.html\r\n        // window.location.href = 'last.html';\r\n    });\r\n\r\n    // 편집 기능 비활성화 함수\r\n    function disableEditing() {\r\n        svgPalette.style.pointerEvents = 'none';\r\n        colorOptions.style.pointerEvents = 'none';\r\n        removeButton.style.display = 'none';\r\n        completeButton.style.display = 'none';\r\n        saveButton.style.display = 'block';\r\n        shareButton.style.display = 'block';\r\n        fistButton.style.display = 'block';\r\n\r\n        svgContainer.removeEventListener('mousedown', handleDragStart);\r\n        svgContainer.removeEventListener('touchstart', handleDragStart);\r\n    }\r\n\r\n    function loadSavedSvg() {\r\n        const savedSvg = localStorage.getItem('savedSvg');\r\n        if (savedSvg) {\r\n            const svgContainer = document.getElementById('svgContainer');\r\n            svgContainer.innerHTML = savedSvg;\r\n        }\r\n    }\r\n    \r\n    // Call loadSavedSvg when last.html is loaded\r\n    if (window.location.pathname.endsWith('last.html')) {\r\n        loadSavedSvg();\r\n    }\r\n\r\n    // 저장 버튼 이벤트 리스너\r\n    function saveLastbtn() {\r\n        saveButton.addEventListener('click', async () => {\r\n            if (!isCompleted) return;\r\n            try {\r\n                const pngDataUrl = await generateCompositePng();\r\n                const link = document.createElement('a');\r\n                link.href = pngDataUrl;\r\n                link.download = 'composed_image.png';\r\n                link.click();\r\n            } catch (error) {\r\n                console.error('Error saving PNG:', error);\r\n                alert('PNG 저장 중 오류가 발생했습니다.');\r\n            }\r\n        });\r\n    \r\n    // 공유 버튼 이벤트 리스너\r\n    shareButton.addEventListener('click', async () => {\r\n        if (!isCompleted) return;\r\n        try {\r\n            const pngDataUrl = await generateCompositePng();\r\n            const blob = await (await fetch(pngDataUrl)).blob();\r\n            const file = new File([blob], 'composed_image.png', { type: 'image/png' });\r\n\r\n            if (navigator.share) {\r\n                navigator.share({\r\n                    files: [file],\r\n                    title: 'Composed Image',\r\n                    text: 'Check out my composed image!'\r\n                }).then(() => console.log('Shared successfully'))\r\n                    .catch((error) => console.log('Error sharing:', error));\r\n            } else {\r\n                alert('Web Share API is not supported in your browser.');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error sharing PNG:', error);\r\n            alert('PNG 공유 중 오류가 발생했습니다.');\r\n        }\r\n    });\r\n    }\r\n    saveLastbtn();\r\n    // // 초기 버튼 상태 설정\r\n    // saveButton.style.display = 'none';\r\n    // shareButton.style.display = 'none';\r\n\r\n    // 초기 배경색 설정\r\n    changeBackgroundColor('#FFFFFF');\r\n}\r\n\r\n"],"names":[],"version":3,"file":"index.c470cbad.js.map","sourceRoot":"/__parcel_source_root/"}